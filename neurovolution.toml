[application]
name = "Neurovolution"
version = 0.3
debug = true

[simulation]
max_iterations = 100000
max_creatures = 10000
min_creatures = 10
# if value > -1 this value will be used to seed the random generators
seed = -1
season_iterations = 100

[visualisation]
on = true
size = [256, 256]
framerate = 60
interval = 1

[world_parameters]
size = 256
grass_growing_speed = 0.01
max_grass_length = 1
max_water_depth = 1000
max_terrain_height = 3000
max_temperature = 20
min_temperature = 10
delta_temperature = 0.001
grass_density = 0.0001

[creatures]
# name, id, color
species = [
    ["rabbit", 10, [255, 0, 0]],
    ["wolve", 11, [0, 0, 255]]
]

# RABBIT

[creature.rabbit]
n_creatures = 250 # initial number of creatures
initial_energy = 10
max_energy = 1000
max_age = 10
energy_per_timestep = 0.5
energy_from_grass = 2
energy_from_dirt = 0
min_energy_for_reproduction = 1
min_age_for_reproduction = 5
grass_eat_speed = 1

[sensors.rabbit]
# all sensor functions must be defined in sensor.py
# configformat: 'functionname', number of outputs, activation function ('None'), true=always on|false=evolution
functions = [
    ['four_random_values', 4, 'None', false],
    ['look_for_grass', 9, 'None', false],
    ['has_no_neighbours', 1, 'None', true]
]

[actuators.rabbit]
# all actuator functions must be defined in actuator.py
# configformat: 'functionname', number of input signals, activation function, true=always on|false=evolution
# Note: actuators will be actuated, after all sensors have been read. Id actuators alter the world/state this
#  mights lead to problems. They are actuated in order of the array however, so shifting them might prevent
#  this.
functions = [
    ['reproduce', 1, 'sigmoid', false],
    ['eat_grass', 1, 'sigmoid', false],
    ['move', 4, 'sigmoid', false],
]

[body.rabbit]
# 'name', min, max, rounded
properties = []
mutation = {p = 0.8, sd = 0.25}

[brain.rabbit]
mutation = {p = 0.8, sd = 0.25}
# only hidden layers have to be specified, first and last layer are determined by sensors and actuators
# number of neurons, activation
hidden_layers = []

# define connections: [sensor, hidden_layer], [hidden_layer, actuator] or [sensor, actuator]
# every connection will get its own outxin parameters
# note: the order they are defined is the order in which they will be calculated
connections = [
    ['four_random_values', 'move'],
    ['look_for_grass', 'eat_grass']
]

# define connections that bypass the brain: [sensor, actuator]
# there will be no weight, bias or activation out == in, so dimensions must match!
# note: sensors/actuators will still respect if they are active in the dna
direct_connections = [
    ['has_no_neighbours', 'reproduce']
]

# WOLVE

[creature.wolve]
n_creatures = 250 # initial number of creatures
initial_energy = 10
max_energy = 1000
max_age = 10
energy_per_timestep = 0.5
energy_from_grass = 2
energy_from_dirt = 0
min_energy_for_reproduction = 1
min_age_for_reproduction = 5
grass_eat_speed = 1

[sensors.wolve]
# all sensor functions must be defined in sensor.py
# configformat: 'functionname', number of outputs, activation function ('None'), true=always on|false=evolution
functions = [
    ['four_random_values', 4, 'None', false],
    ['look_for_grass', 9, 'None', false],
    ['has_no_neighbours', 1, 'None', true]
]

[actuators.wolve]
# all actuator functions must be defined in actuator.py
# configformat: 'functionname', number of input signals, activation function, true=always on|false=evolution
# Note: actuators will be actuated, after all sensors have been read. Id actuators alter the world/state this
#  mights lead to problems. They are actuated in order of the array however, so shifting them might prevent
#  this.
functions = [
    ['reproduce', 1, 'sigmoid', false],
    ['eat_grass', 1, 'sigmoid', false],
    ['move', 4, 'sigmoid', false],
]

[body.wolve]
# 'name', min, max, rounded
properties = []
mutation = {p = 0.8, sd = 0.25}

[brain.wolve]
mutation = {p = 0.8, sd = 0.25}
# only hidden layers have to be specified, first and last layer are determined by sensors and actuators
# number of neurons, activation
hidden_layers = []

# define connections: [sensor, hidden_layer], [hidden_layer, actuator] or [sensor, actuator]
# every connection will get its own outxin parameters
# note: the order they are defined is the order in which they will be calculated
connections = [
    ['four_random_values', 'move'],
    ['look_for_grass', 'eat_grass']
]

# define connections that bypass the brain: [sensor, actuator]
# there will be no weight, bias or activation out == in, so dimensions must match!
# note: sensors/actuators will still respect if they are active in the dna
direct_connections = [
    ['has_no_neighbours', 'reproduce']
]

